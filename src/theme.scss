@use "sass:list";
@use "sass:map";
@use "sass:meta";

$theme: (
  primary: #ff912c,
  secondary: #b6b6b6,
  disabled-gray: rgb(222, 222, 222),
  success: #12bc12,
  loading: #00a8d8,
  danger: #ff6868
);

@function theme-color($key) {
  @return map-get($theme, $key);
}

$sizes: (xs, sm, md, lg, xl);

// Minimum width for the given screen size.
$breakpoints-min: (
  xs: 0px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
);

// Maximum width for the given screen size.
$breakpoints-max: (
  xs: 0px,
  sm: 575.98px,
  md: 767.98px,
  lg: 991.98px,
  xl: 1199.98px
);

// Mixin to apply styles to the given viewport and larger.
@mixin for-viewport-up($size) {
  // Small devices (landscape phones).
  @if ($size == sm) {
    @media all and (min-width: map-get($breakpoints-min, sm)) {
      @content;
    }
  }
  // Medium devices (tablets).
  @else if ($size == md) {
    @media all and (min-width: map-get($breakpoints-min, md)) {
      @content;
    }
  }
  // Large devices (desktops).
  @else if ($size == lg) {
    @media all and (min-width: map-get($breakpoints-min, lg)) {
      @content;
    }
  }
  // Extra large devices (large desktops).
  @else if ($size == xl) {
    @media all and (min-width: map-get($breakpoints-min, xl)) {
      @content;
    }
  } @else {
    @content;
  }
}

// Mixin to apply styles to the given viewport and smaller.
@mixin for-viewport-down($size) {
  // Extra small devices (portrait phones).
  @if ($size == xs) {
    @media all and (max-width: map-get($breakpoints-max, sm)) {
      @content;
    }
  }
  // Small devices (landscape phones).
  @else if ($size == sm) {
    @media all and (max-width: map-get($breakpoints-max, md)) {
      @content;
    }
  }
  // Medium devices (tablets).
  @else if ($size == md) {
    @media all and (max-width: map-get($breakpoints-max, lg)) {
      @content;
    }
  }
  // Large devices (desktops).
  @else if ($size == lg) {
    @media all and (max-width: map-get($breakpoints-max, xl)) {
      @content;
    }
  } @else {
    @content;
  }
}

// Mixin to apply styles only to the given viewport.
@mixin for-viewport-only($size) {
  // Extra small devices (portrait phones).
  @if ($size == xs) {
    @media all and (min-width: map-get($breakpoints-min, xs)) and (max-width: map-get($breakpoints-max, sm)) {
      @content;
    }
  }
  // Small devices (landscape phones).
  @if ($size == sm) {
    @media all and (min-width: map-get($breakpoints-min, sm)) and (max-width: map-get($breakpoints-max, md)) {
      @content;
    }
  }
  // Medium devices (tablets).
  @else if ($size == md) {
    @media all and (min-width: map-get($breakpoints-min, md)) and (max-width: map-get($breakpoints-max, lg)) {
      @content;
    }
  }
  // Large devices (desktops).
  @else if ($size == lg) {
    @media all and (min-width: map-get($breakpoint-mins, lg)) and (max-width: map-get($breakpoints-max, xl)) {
      @content;
    }
  }
  // Extra large devices (large desktops).
  @else if ($size == xl) {
    @media all and (min-width: map-get($breakpoints-min, xl)) {
      @content;
    }
  }
}

// Get the index of the next screen size in the $value-map map.
@function get-next-size-index($value-map, $start) {
  @if $start > length($sizes) {
    @return $start;
  }

  $i: $start + 1;
  @while $i <= length($sizes) and map.get($value-map, list.nth($sizes, $i)) == null {
    $i: $i + 1;
  }

  @if $i > length($sizes) {
    @return $i;
  }

  @return $i;
}

// Set a property dynamically based on the screen size.
@mixin set-property-for-screen-size($property, $value-map) {
  @if meta.type-of($value-map) != map {
    @error "Input to set-property-for-screen-size is not a map: got #{$value-map}, want map";
  }

  $i: 0;
  @while $i <= length($sizes) {
    $i: get-next-size-index($value-map, $i);
    @if $i <= length($sizes) {
      $size: list.nth($sizes, $i);
      @include for-viewport-up($size) {
        #{$property}: map.get($value-map, $size);
      }
    }
  }
}

$elevation-umbra-color: rgba(0, 0, 0, 0.2);
$elevation-penumbra-color: rgba(0, 0, 0, 0.14);
$elevation-ambient-color: rgba(0, 0, 0, 0.12);

$elevation-umbra: (
  0: "0 0 0 0",
  1: "0 2px 1px -1px",
  2: "0 3px 1px -2px",
  3: "0 3px 3px -2px",
  4: "0 2px 4px -1px",
  5: "0 3px 5px -1px",
  6: "0 3px 5px -1px",
  7: "0 4px 5px -2px",
  8: "0 5px 5px -3px",
  9: "0 5px 6px -3px",
  10: "0 6px 6px -3px",
  11: "0 6px 7px -4px",
  12: "0 7px 8px -4px",
  13: "0 7px 8px -4px",
  14: "0 7px 9px -4px",
  15: "0 8px 9px -5px",
  16: "0 8px 10px -5px",
  17: "0 8px 11px -5px",
  18: "0 9px 11px -5px",
  19: "0 9px 12px -6px",
  20: "0 10px 13px -6px",
  21: "0 10px 13px -6px",
  22: "0 10px 14px -6px",
  23: "0 11px 14px -7px",
  24: "0 11px 15px -7px"
);

$elevation-penumbra: (
  0: "0 0 0 0",
  1: "0 1px 1px 0",
  2: "0 2px 2px 0",
  3: "0 3px 4px 0",
  4: "0 4px 5px 0",
  5: "0 5px 8px 0",
  6: "0 6px 10px 0",
  7: "0 7px 10px 1px",
  8: "0 8px 10px 1px",
  9: "0 9px 12px 1px",
  10: "0 10px 14px 1px",
  11: "0 11px 15px 1px",
  12: "0 12px 17px 2px",
  13: "0 13px 19px 2px",
  14: "0 14px 21px 2px",
  15: "0 15px 22px 2px",
  16: "0 16px 24px 2px",
  17: "0 17px 26px 2px",
  18: "0 18px 28px 2px",
  19: "0 19px 29px 2px",
  20: "0 20px 31px 3px",
  21: "0 21px 33px 3px",
  22: "0 22px 35px 3px",
  23: "0 23px 36px 3px",
  24: "0 24px 38px 3px"
);

$elevation-ambient: (
  0: "0 0 0 0",
  1: "0 1px 3px 0",
  2: "0 1px 5px 0",
  3: "0 1px 8px 0",
  4: "0 1px 10px 0",
  5: "0 1px 14px 0",
  6: "0 1px 18px 0",
  7: "0 2px 16px 1px",
  8: "0 3px 14px 2px",
  9: "0 3px 16px 2px",
  10: "0 4px 18px 3px",
  11: "0 4px 20px 3px",
  12: "0 5px 22px 4px",
  13: "0 5px 24px 4px",
  14: "0 5px 26px 4px",
  15: "0 6px 28px 5px",
  16: "0 6px 30px 5px",
  17: "0 6px 32px 5px",
  18: "0 7px 34px 6px",
  19: "0 7px 36px 6px",
  20: "0 8px 38px 7px",
  21: "0 8px 40px 7px",
  22: "0 8px 42px 7px",
  23: "0 9px 44px 8px",
  24: "0 9px 46px 8px"
);

@mixin elevation($z-index: 1) {
  @if type-of($z-index) != number or not unitless($z-index) {
    @error "$z-index must be a unitless number.";
  }

  @if $z-index < 0 or $z-index > 24 {
    @error "$z-index must be between 0 and 24.";
  }

  box-shadow:
    #{map-get($elevation-umbra, $z-index)} $elevation-umbra-color,
    #{map-get($elevation-penumbra, $z-index)} $elevation-penumbra-color,
    #{map-get($elevation-ambient, $z-index)} $elevation-ambient-color;
}
